Given an integer array nums, return the length of the longest strictly increasing subsequence.

A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4
Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1


//algo loop j < i  , if nums[i] > nums[j]  && lis[i]<=[j] ..its a part of subsequence 
class Solution {
    public int lengthOfLIS(int[] nums) {
        
        int n = nums.length;
        if( n == 0 ) return 0;
        
        
        int[] lis = new int[n]; 
        
        
        for(int i = 0 ;i < n ;i++)
        {
            lis[i] = 1;
            
            for(int j =0;j<i;j++)
            {
                
                if(nums[i] > nums[j] && lis[i] <= lis[j])
                    lis[i] = lis[j]+1;
            }
        }
        
        int max = 0;
        
        for( int x : lis)
        max = Math.max(max, x);
        
        return max;
    }
}


class Solution {
    public int lengthOfLIS(int[] nums) {
        ArrayList<Integer> sub = new ArrayList<>();
        sub.add(nums[0]);
        
        for (int i = 1; i < nums.length; i++) {
            int num = nums[i];
            if (num > sub.get(sub.size() - 1)) {
                sub.add(num);
            } else {
                int j = binarySearch(sub, num);
                sub.set(j, num);
            }
        }
        
        return sub.size();
    }
    
    private int binarySearch(ArrayList<Integer> sub, int num) {
        int left = 0;
        int right = sub.size() - 1;
        int mid = (left + right) / 2;
        
        while (left < right) {
            mid = (left + right) / 2;
            if (sub.get(mid) == num) {
                return mid;
            }
            
            if (sub.get(mid) < num) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        
        return left;
    }
}
