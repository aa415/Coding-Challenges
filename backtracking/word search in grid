class Solution {
    public boolean exist(char[][] board, String word) {
        
        for( int row =0; row<board.length;row++)
        {
            for( int col =0; col< board[row].length;col++)
            {
                if(board[row][col] == word.charAt(0) && dfs(board, row,col,word,0))
                {
                    return true;
                }
            }
        }
        
        return false;
    }
    
    public static boolean dfs(char[][] board , int row,int col ,String word, int count)
    {
        if(count == word.length()) return true;
        
        if(row < 0 || row >= board.length || col<0 || col >=board[row].length || board[row][col] != word.charAt(count))
         return false;
        
        char temp = board[row][col];
        board[row][col] = ' ';
        
      boolean found =  dfs(board, row,col+1,word,count+1) ||
                       dfs(board, row+1,col,word,count+1) ||
                       dfs(board, row-1,col,word,count+1) ||
                       dfs(board, row,col-1,word,count+1) ;
        
    board[row][col] = temp;
        
        return found;
    }
    
}
