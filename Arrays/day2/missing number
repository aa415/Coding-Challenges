class Solution {
   
   ///approach 1
   
   To illustrate the algorithm, let's consider an example [3,3,5,4,1,3][3,3,5,4,1,3]:

[\underline3,3,5,\underline4,1,3][ 
3
​
 ,3,5, 
4
​
 ,1,3] // Compare nums[0] to nums[nums[0]] (i.e. nums[0] to nums[3]). 33 != 44. Swap them. Now the first 33 will be swapped into its correct position, and position 0 has 44.
[\underline4,3,5,3,\underline1,3][ 
4
​
 ,3,5,3, 
1
​
 ,3] // Compare nums[0] to nums[4]. 4 != 1. Not equal, so swap again. Now 4 is in its correct position.
[\underline1,\underline3,5,3,4,3][ 
1
​
 , 
3
​
 ,5,3,4,3] // Compare nums[0] with nums[1]. Not equal, swap.
[\underline3,1,5,\underline3,4,3][ 
3
​
 ,1,5, 
3
​
 ,4,3] // Now nums[0] == nums[3] (both are 3). That's it! 3 is in both positions 0 and position 3, so it's the duplicate.
   class Solution {
    public int findDuplicate(int[] nums) {
        while (nums[0] != nums[nums[0]]) {
            int nxt = nums[nums[0]];
            nums[nums[0]] = nums[0];
            nums[0] = nxt;
        }
        return nums[0];
    }
}
   
   
   
   //aproach 2
   public int findDuplicate(int[] nums) {
        
        // Find the intersection point of the two runners.
        int tortoise = nums[0];
        int hare = nums[0];
        
        do {
            tortoise = nums[tortoise];
            hare = nums[nums[hare]];
        } while (tortoise != hare);

        // Find the "entrance" to the cycle.
        tortoise = nums[0];
        
        while (tortoise != hare) {
            tortoise = nums[tortoise];
            hare = nums[hare];
        }

        return hare;
    }
}
